


to setup
  setup-world
  setup-centres  
  setup-network
  if not config-comparison? [setup-center-activities]
  setup-patches
  setup-reporters
end



to setup-world
  clear-all
  reset-ticks
  set-patch-size psize
  resize-world 0 worldwidth 0 worldheight
  set dmax sqrt ((world-width ^ 2) + (world-height ^ 2))
  set current-time-spent 0
  
  ;;profiler for debug purposes
  profiler:reset
  profiler:start
  set tracker-time 0
end



to setup-patches
    ask patches [
      set pcolor white
      set constructed? false
      set constructible? true
      set value 0
      set rent 0
    ]
    
    ;;deal with already existing nw and centers
    ask patches with [count centres-here > 0] [set constructible? false]
    ;;could count some twice, however, isolated centers ? NO ! previous line ~
    ask paths [foreach footprint [ask ? [set constructible? false]]]
end





to setup-centres
  ifelse not config-from-file? [create-centres centers-number [ set shape "circle" set size 1 set color red setxy random world-width random world-height]]
  [let pos "" ifelse not config-comparison? [set pos user-new-file][set pos "/Users/Juste/Documents/Complex Systems/ProjetUrbanFramework/Models/Activities/atlantis.txt"]
   if pos != false [
     file-open pos
     let c file-read-line ; explanation line
     let n 0
     while [not file-at-end?][
       let s file-read-line ;comment line
       let x read-from-string file-read-line
       let y read-from-string file-read-line
       let a 0
       if not config-comparison? [set a read-from-string file-read-line]
       create-centres 1 [
         set shape "circle" set size 3 setxy x y 
         if not config-comparison? [ set color 140 * a / activities-number set activity a]
         set number n
         ]
       set n n + 1
     ]
     file-close 
   ]
    ]
  
  ask centres [create-paths-with ((other centres) with-min [distance myself]) with [not path-neighbor? myself][new-path]]
end





;;setup function
;;built core structure with centers
to setup-network
    
  ;;connect weak-components
  let clusters []
  while [length clusters = 0 or length clusters > 2] [
     nw:set-snapshot turtles links
     set clusters nw:weak-component-clusters
     ;take one cluster, connects with the closest
     let c1 first sort-by [([pxcor] of first ?1 < [pxcor] of first ?2) or (([pxcor] of first ?1 = [pxcor] of first ?2) and ([pycor] of first ?1 < [pycor] of first ?2))] (map [sort-by [([pxcor] of ?1 < [pxcor] of ?2) or (([pxcor] of ?1 = [pxcor] of ?2) and ([pycor] of ?1 < [pycor] of ?2))] ?] clusters)
     let dmin dmax let tmin1 one-of turtles let tmin2 one-of turtles
     foreach clusters[
       ;fucking netlogo hardcore with implicit pointers
       let aux remove 0 c1
       foreach ? [set aux remove ? aux]
         if  not empty? aux [
           let d dmax let t1 one-of c1 let t2 one-of ?
           foreach ? [
             let t ?
             foreach c1 [
               ask ? [if distance t < d [set d distance t set t1 self set t2 t]] 
             ]
           ]
           show d
           if d < dmin [set dmin d set tmin1 t1 set tmin2 t2]
         ]
     ]
     
     ;;not proved totally yet : sometimes tmin1 = tmin2, why?
     
     if tmin1 != tmin2 [
       ask tmin1 [create-path-with tmin2 [new-path]]
     ]
     
  ]
end




;;shitty function -- have a look at that.
to setup-center-activities
  if not config-from-file? [
    ;random distribution of Ncenters/Nactivities centers for each activities
    let c []
    ask centres [set c fput self c] ;convert agentset to list
    let n floor (count centres) / activities-number
    let a 0
    repeat activities-number [
      foreach n-of n c [
        ask ? [
          set activity a
          set c remove self c
        ]
      ] 
      set a a + 1
    ]
    ask centres [set color activity * 130 / activities-number show activity]
  ]
end


to setup-reporters
  ;;settings for moran index
  set moran-populations table:make
  set moran-grid-size floor (world-width / 10) ;;good compromise regarding complexity ?
end



