




to compare-activities-configurations
  
  let filename word (word "atlantis_" timer) ".sci"
  file-open filename
  file-print "d=[];speed=[];config=[];a=[];"
  file-close

  let ii 1

  set config-from-file? true
  set config-comparison? true

  foreach generate-configs-list [
      
      setup
      
      let n 0
      let conf 0
      foreach ? [ask centres with [number = n] [set activity ? set color 140 * ? / activities-number] set n n + 1 set conf (10 * conf) + ?]
      
      
      ;;generate urban shape
      while [ ticks < max-ticks ][
        go
      ]
      
      update-vars
      
      ;;export values in file
      file-open filename
      file-print word (word (word (word "d(" ii) ")=") eval-density ) ";"
      file-print word (word (word (word "speed(" ii) ")=") eval-speed ) ";"
      file-print word (word (word (word "a(" ii) ")=") eval-activities ) ";"
      file-print word (word (word (word "conf(" ii) ")=") conf ) ";"
      file-close
      
      
      set ii (ii + 1)

    ]

end



;;generates possibles configurations for centres with not fixed activity, ie with activity != 0
;;configuration will apply corresponding to numerotation
to-report generate-configs-list
  let res aux-arborescent [[]]
  foreach res [
    if not member? 1 ? or not member? 2 ? [set res remove ? res] 
  ]
  report res
end

;;auxiliary recursive function
to-report aux-arborescent [lists]
  ifelse length first lists = (count centres) - (count centres with [activity = 0]) [report lists]
  [report sentence aux-arborescent map [lput 1 ?] lists aux-arborescent map [lput 2 ?] lists]
end
